<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="JH">

<!-- #88. 댓글쓰기 (tbl_comment 테이블에 insert) -->
	<insert id="addComment" parameterType="FleamarketCommentVO">
		insert into tbl_fleamarketcomment(fleamarketcommentseq, fleamarketseq, comment_text, registerdate, fk_userid)
		values(seq_fleamarketcomment.nextval, #{fleamarketseq}, #{comment_text}, default, #{fk_userid})
	</insert>
	
	<!-- #89-1. tbl_board 테이블에 commentCount 컬럼이 1증가(update) -->
	<update id="updateCommentCount" parameterType="String">
		update tbl_fleamarket set commentcount = commentcount+1
		where fleamarketseq = #{fleamarketseq}
	</update>
	
	<!-- === #93. 원게시물에 딸린 댓글들을 조회해오기 === -->
    <!-- 첨부파일이 없는 경우  -->
    <select id="getCommentList" parameterType="String" resultType="FleamarketCommentVO">
		select fleamarketcommentseq, fk_userid, comment_text, changestatus
		     , to_char(registerdate, 'yyyy-mm-dd hh24:mi:ss') AS registerdate
             , V.memberimg
		from tbl_fleamarketcomment A join tbl_member V
		ON A.fk_userid = V.userid
		where A.fleamarketseq = #{parentSeq}
		order by fleamarketcommentseq desc
    </select>


	<update id="updateComment" parameterType="HashMap">
        update tbl_fleamarketcomment set comment_text = #{comment_text}, registerdate = sysdate, changestatus = 1
        where fleamarketcommentseq = #{fleamarketcommentseq}
    </update>

    <delete id="deleteComment" parameterType="String">
        delete from tbl_fleamarketcomment
        where fleamarketcommentseq = #{fleamarketcommentseq}
    </delete>
    
    <update id="updateCommentCount_decrease" parameterType="String">
        update tbl_fleamarket set commentcount = commentcount - 1 
        where fleamarketseq = #{fleamarketseq}
    </update>


	<select id="getCommentreList" parameterType="String" resultType="FleamarketCommentReVO">
		select fleamarketcommentreplyseq, fk_userid, commentreply_text, changestatus
		     , to_char(registerdate, 'yyyy-mm-dd hh24:mi:ss') AS registerdate
             , V.memberimg
		from tbl_fleamarketcommentreply A join tbl_member V
		ON A.fk_userid = V.userid
		where A.fleamarketcommentseq = #{fleamarketcommentseq}
		order by fleamarketcommentreplyseq desc
    </select>

	<insert id="addReComment" parameterType="FleamarketCommentReVO">
		insert into tbl_fleamarketcommentreply(fleamarketcommentreplyseq, fleamarketcommentseq, commentreply_text, fk_userid)
		values(seq_fleamarketcommentreplyseq.nextval, #{fleamarketcommentseq}, #{commentreply_text}, #{fk_userid})
	</insert>
	
	<update id="updateReCommentCount" parameterType="String">
		update tbl_fleamarketcomment set recommentcount = recommentcount+1
		where fleamarketcommentseq = #{fleamarketcommentseq}
	</update>
	
	<update id="updateReComment" parameterType="HashMap">
        update tbl_fleamarketcommentreply set commentreply_text = #{commentreply_text}, registerdate = sysdate, changestatus = 1
        where fleamarketcommentreplyseq = #{fleamarketcommentreplyseq}
    </update>
    
    <delete id="deleteReComment" parameterType="String">
        delete from tbl_fleamarketcommentreply
        where fleamarketcommentreplyseq = #{fleamarketcommentreplyseq}
    </delete>
    
    <update id="updateReCommentCount_decrease" parameterType="String">
        update tbl_fleamarketcomment set recommentcount = recommentcount - 1 
        where fleamarketcommentseq = #{fleamarketcommentseq}
    </update>
    
    <select id="getMyClub" resultType="ClubVO" parameterType="HashMap">
		select clubseq, clubname, clubimg, fk_sportseq, fk_userid, clubtel, city, local, clubgym, clubtime, membercount, clubpay, clubstatus, clubscore, viewcount
		from tbl_club
		where clubseq = #{clubseq}
	</select>

	<update id="updateviewcount" parameterType="String">
		update tbl_club set viewcount = viewcount+1
		where clubseq = #{clubseq}
	</update>
	
	<select id="getmatchingList" resultType="MatchingVO" parameterType="String">
		SELECT m.matchingseq, m.result1, m.result2, m.clubseq1, m.clubseq2, m.score1, m.score2, c1.clubname AS clubname1, c2.clubname AS clubname2, r.area, to_char(r.matchdate, 'YYYY-MM-DD') AS matchdate
		FROM tbl_matching m
		JOIN tbl_club c1 ON m.clubseq1 = c1.clubseq
		JOIN tbl_club c2 ON m.clubseq2 = c2.clubseq
		JOIN tbl_matchingreg r ON m.matchingregseq = r.matchingregseq
		where m.clubseq2 = #{clubseq} or m.clubseq1 = #{clubseq}
		order by matchingseq desc
	</select>
	
	<select id="getGymAdd" resultType="GymVO">
		select lng, lat, gymseq
		from tbl_gym
	</select>
	
	<select id="getGymInfo" resultType="GymVO" parameterType="String">
		select gymname, address, detailaddress, cost, orgfilename, lat, lng, filename
		from tbl_gym
		where gymseq = #{gymseq}
	</select>
	
	
	<select id="getgymPay" resultType="GymVO" parameterType="String">
		select gymname, address, detailaddress, cost, orgfilename, lat, lng, filename
		from tbl_gym
		where gymseq = #{gymseq}
	</select>
	
	
	<insert id="gymPayEnd" parameterType="HashMap">
		insert into tbl_gymres(gymresseq, fk_gymseq, fk_userid, reservation_date, time, coinmoney)
		values(seq_gymresseq.nextval, #{fk_gymseq}, #{fk_userid}, TO_DATE(#{reservation_date}, 'YYYY-MM-DD'), #{time}, #{numericPrice})
	</insert>
	
	
	<resultMap type="HashMap" id="gymDateMap"> 
		<result property="gymresseq" column="gymresseq" javaType="String"/>
		<result property="fk_gymseq" column="fk_gymseq" javaType="String"/>
		<result property="fk_userid" column="fk_userid" javaType="String"/>
		<result property="reservation_date" column="reservation_date" javaType="String"/>
		<result property="time" column="time" javaType="String"/>
	</resultMap>
	<select id="getgymPayDate" resultMap="gymDateMap" parameterType="HashMap">
		select gymresseq, fk_gymseq, fk_userid, reservation_date, time
		from tbl_gymres
		where reservation_date = #{reservation_date} and fk_gymseq = #{gymseq}
	</select>
	
	
	<select id="getCost" resultType="String" parameterType="String">
		select cost
		from tbl_gym
		where gymseq = #{gymseq}
	</select>
	
	
	<resultMap type="HashMap" id="resMap"> 
		<result property="reservation_date" column="reservation_date" javaType="String"/>
		<result property="fk_gymseq" column="fk_gymseq" javaType="String"/>
		<result property="fk_userid" column="fk_userid" javaType="String"/>
		<result property="time_range" column="time_range" javaType="String"/>
		<result property="coinmoney" column="coinmoney" javaType="String"/>
		<result property="gymname" column="gymname" javaType="String"/>
	</resultMap>
	<select id="getresinfo" resultMap="resMap" parameterType="String">
		WITH time_data AS (
		    SELECT
		        gymresseq,
		        fk_gymseq,
		        fk_userid,
		        coinmoney,
		        reservation_date,
		        TO_DATE(time, 'HH24:MI') AS reservation_time,
		        LAG(TO_DATE(time, 'HH24:MI')) OVER (
		            PARTITION BY fk_gymseq, fk_userid, reservation_date
		            ORDER BY TO_DATE(time, 'HH24:MI')
		        ) AS prev_time
		    FROM
		        tbl_gymres
		    WHERE
		        fk_userid = #{userid}
		),
		grouped_data AS (
		    SELECT
		        gymresseq,
		        fk_gymseq,
		        coinmoney,
		        fk_userid,
		        reservation_date,
		        reservation_time,
		        prev_time,
		        SUM(
		            CASE
		                WHEN reservation_time = prev_time + INTERVAL '60' MINUTE THEN 0
		                ELSE 1
		            END
		        ) OVER (
		            PARTITION BY fk_gymseq, fk_userid, reservation_date
		            ORDER BY reservation_time
		        ) AS grp
		    FROM
		        time_data
		),
		final_groups AS (
		    SELECT
		        fk_gymseq,
		        fk_userid,
		        coinmoney,
		        reservation_date,
		        MIN(reservation_time) AS start_time,
		        MAX(reservation_time) AS end_time,
		        grp
		    FROM
		        grouped_data
		    GROUP BY
		        fk_gymseq,
		        fk_userid,
		        coinmoney,
		        reservation_date,
		        grp
		),
		final_groups_with_rno AS (
		    SELECT
		        fg.fk_gymseq,
		        fg.fk_userid,
		        fg.coinmoney,
		        fg.reservation_date,
		        TO_CHAR(fg.start_time, 'HH24:MI') || ' ~ ' || TO_CHAR((CAST(fg.end_time AS TIMESTAMP) + INTERVAL '1' HOUR), 'HH24:MI') AS time_range,
		        g.gymname,
		        ROW_NUMBER() OVER (ORDER BY fg.reservation_date, fg.start_time) AS rno
		    FROM
		        final_groups fg
		    JOIN
		        tbl_gym g ON fg.fk_gymseq = g.gymseq
		)
		SELECT
		    fk_gymseq,
		    fk_userid,
		    coinmoney,
		    reservation_date,
		    time_range,
		    gymname
		FROM
		    final_groups_with_rno
		WHERE rno BETWEEN #{startRno} AND #{endRno}
		ORDER BY
		    reservation_date, time_range
	</select>
	
	
	<delete id="res_cancel" parameterType="HashMap">
        DELETE FROM tbl_gymres
		WHERE gymresseq IN (
		    SELECT gymresseq
		    FROM tbl_gymres
		    WHERE fk_gymseq = #{gymseq}
		      AND fk_userid = #{fk_userid}
		      AND reservation_date = TO_DATE(#{reservation_date}, 'YY/MM/DD')
		      AND TO_DATE(time, 'HH24:MI') BETWEEN TO_DATE(#{startTime}, 'HH24:MI') AND TO_DATE(#{endTime}, 'HH24:MI')
		)
    </delete>
	
	
	<select id="getTotalCount" parameterType="String" resultType="int">
	    SELECT COUNT(*)
		FROM (
		    WITH time_data AS (
		        SELECT
		            gymresseq,
		            fk_gymseq,
		            fk_userid,
		            coinmoney,
		            reservation_date,
		            TO_DATE(time, 'HH24:MI') AS reservation_time,
		            LAG(TO_DATE(time, 'HH24:MI')) OVER (
		                PARTITION BY fk_gymseq, fk_userid, reservation_date
		                ORDER BY TO_DATE(time, 'HH24:MI')
		            ) AS prev_time
		        FROM
		            tbl_gymres
		        WHERE
		            fk_userid = #{userid}
		    ),
		    grouped_data AS (
		        SELECT
		            gymresseq,
		            fk_gymseq,
		            coinmoney,
		            fk_userid,
		            reservation_date,
		            reservation_time,
		            prev_time,
		            SUM(
		                CASE
		                    WHEN reservation_time = prev_time + INTERVAL '60' MINUTE THEN 0
		                    ELSE 1
		                END
		            ) OVER (
		                PARTITION BY fk_gymseq, fk_userid, reservation_date
		                ORDER BY reservation_time
		            ) AS grp
		        FROM
		            time_data
		    ),
		    final_groups AS (
		        SELECT
		            fk_gymseq,
		            fk_userid,
		            coinmoney,
		            reservation_date,
		            MIN(reservation_time) AS start_time,
		            MAX(reservation_time) AS end_time,
		            grp
		        FROM
		            grouped_data
		        GROUP BY
		            fk_gymseq,
		            fk_userid,
		            coinmoney,
		            reservation_date,
		            grp
		    )
		    SELECT
		        fg.fk_gymseq,
		        fg.fk_userid,
		        fg.coinmoney,
		        fg.reservation_date,
		        TO_CHAR(fg.start_time, 'HH24:MI') || ' ~ ' || TO_CHAR((CAST(fg.end_time AS TIMESTAMP) + INTERVAL '1' HOUR), 'HH24:MI') AS time_range,
		        g.gymname
		    FROM
		        final_groups fg
		    JOIN
		        tbl_gym g ON fg.fk_gymseq = g.gymseq
		) result_set
	</select>
	
	
	
	<resultMap type="HashMap" id="viewresMap"> 
		<result property="lat" column="lat" javaType="String"/>
		<result property="lng" column="lng" javaType="String"/>
		<result property="gymseq" column="gymseq" javaType="String"/>
	</resultMap>
	<select id="getviewresList" resultMap="viewresMap" parameterType="String">
		select lng, lat
		from tbl_gym
		where gymseq = #{gymseq}
	</select>
	
	
	
	<select id="getfleMap" resultType="FleamarketVO" parameterType="String">
		select *
		from tbl_fleamarket
		where fleamarketseq = #{fleamarketseq}
	</select>
	
	
	<update id="viewcount" parameterType="String">
		update tbl_fleamarket set viewcount = viewcount+1
		where fleamarketseq = #{fleamarketseq}
	</update>
	
</mapper>