<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="JY">

	
	<!--  지역    -->
	<resultMap type="HashMap" id="cityMap"> <!-- 리스트 안에 맵을 쓰든, 그냥 맵쓰는 경우에 resultMap -->
		<result property="cityseq" column="cityseq" javaType="String"/>
		<result property="cityname" column="cityname" javaType="String"/>
	</resultMap>
	<select id="getCityList" resultMap="cityMap">
		select cityseq, cityname from tbl_city
	</select>
	
	
	<select id="getLocalList" parameterType="String" resultType="String">
		select localname from tbl_local A join tbl_city B on A.fk_cityseq = B.cityseq where cityname = #{cityname}
	</select>
	
	
	
	<!-- 동호회등록  완료 요청(파일첨부ㅇ) -->
	<insert id="add_withFile"  parameterType="ClubVO">
		insert into tbl_club(clubseq, clubname, clubimg, fk_sportseq, fk_userid, clubtel, city, local, clubgym, clubtime, membercount, clubpay, clubstatus, clubscore, wasfileName)
        values(seq_club.nextval, #{clubname},  #{clubimg}, #{fk_sportseq}, #{fk_userid}, #{clubtel}, #{city}, #{local}, #{clubgym}, #{clubtime}, #{membercount}, #{clubpay}, default, default, #{wasfileName} ) 
	</insert>
	
	<!-- 동호회 등록후 회원등급 동호회장으로  업데이트 해주기 -->
	<update id="updateRank" parameterType="String">
		update tbl_member set memberrank = 1
		where userid = #{userid}
	</update>
	
	<!-- 동호회 등록완료 하면 tbl_clubmember 에 insert 하기 -->
	<insert id="insertCmemberTbl" parameterType="Clubvo">
		insert into tbl_clubmember(fk_userid, sportseq, clubseq, status)
		values(#{fk_userid}, #{sportseq}, #{clubseq}, 1)
	</insert>
	
	
	<resultMap type="HashMap" id="sportMap"> <!-- 리스트 안에 맵을 쓰든, 그냥 맵쓰는 경우에 resultMap -->
		<result property="fleamarketseq" column="fleamarketseq" javaType="String"/>
		<result property="sportseq" column="sportseq" javaType="String"/>
		<result property="city" column="city" javaType="String"/>
		<result property="local" column="local" javaType="String"/>
		<result property="title" column="title" javaType="String"/>
		<result property="content" column="content" javaType="String"/>
		<result property="cost" column="cost" javaType="String"/>
		<result property="deal" column="deal" javaType="String"/>
		<result property="fk_userid" column="fk_userid" javaType="String"/>
		<result property="registerdate" column="registerdate" javaType="String"/>
		<result property="commentcount" column="commentcount" javaType="String"/>
		<result property="viewcount" column="viewcount" javaType="String"/>
		<result property="status" column="status" javaType="String"/>
		<result property="imgfilename" column="imgfilename" javaType="String"/>
	</resultMap>
	<select id="getSportNameList" resultMap="sportMap" parameterType="String">
		select fleamarketseq, S.sportseq, city, local, title, content, cost, deal, fk_userid, to_char(registerdate,'yyyy-mm-dd hh24:mi:ss') AS registerdate, commentcount, viewcount, status, imgfilename
		from tbl_sport S
		JOIN tbl_fleamarket F
		ON S.sportseq = F.sportseq
		where sportname = #{sportname}
	</select>


	<!-- 상품등록  완료 요청(파일첨부ㅇ) -->
	<insert id="add_withFilee"  parameterType="FleamarketVO">
		insert into tbl_fleamarket(fleamarketseq, sportseq, city, local, title, content, cost, deal, fk_userid, registerdate, password, commentcount, viewcount, status, imgfilename)
		values(seq_fleamarket.nextval, #{sportseq}, #{city}, #{local}, #{title}, #{content}, #{cost}, #{deal}, #{fk_userid}, default, #{password}, default, default, default, #{imgfilename})	
	</insert>
	
	
	<!-- 모든 상품 select 해오기 -->
	<select id="getAllItemList" resultType="FleamarketVO" >
		select fleamarketseq,  city, local, title, content, cost, deal, fk_userid, to_char(registerdate,'yyyy-mm-dd hh24:mi:ss') AS registerdate, commentcount, viewcount, status, imgfilename
		from tbl_fleamarket
	</select>
	
	<!-- 상품 전체 개수 불러오기 -->
	<select id="getItemCnt" resultType="Int" parameterType="HashMap">
		select count(*)
		from tbl_fleamarket
	</select>


	
	<!-- 리턴타입이 맵일때만 resultmap -->
	<select id="checkseq" resultType="String" parameterType="HashMap">
		select count(*)
		from tbl_clubmember
		where fk_userid = #{userid} and sportseq = #{category}
	</select>
	
	
	
	<!-- 종목별 동호회 게시판 전체 게시글수
	<select id="getTotalCount" resultType="Int" parameterType="HashMap">
		select clubseq, count(*) 
		from tbl_clubboard
		where fk_userid = #{fk_userid}
		group by clubseq
	</select>
	 -->
	
	
	<!-- 동호회 게시판 - 총페이지수 -->
	<select id="getTotalPage" parameterType="HashMap" resultType="int">
		select ceil(count(*)/#{sizePerPage})
		from tbl_clubboard
		<if test="searchType == 'title' and searchWord != ''">and title like '%'||#{searchWord}||'%'</if>
		<if test="searchType == 'content' and searchWord != ''">and content like '%'||#{searchWord}||'%'</if>
		where clubseq = #{clubseq}
	</select>
	
	
	<!--  -->
	<select id="select_clubboard_paging" parameterType="HashMap" resultType="ClubBoardVO">
		select rn, clubboardseq, clubseq, title, content, fk_userid, registerdate, password, commentcount, viewcount, status
		from
		(select rownum rn, clubboardseq, clubseq, title, content, fk_userid, registerdate, password, commentcount, viewcount, status
		from
		(
		select clubboardseq, clubseq, title, content, fk_userid, to_char(registerdate, 'yyyy-mm-dd hh24:mi:ss') registerdate, password, commentcount, viewcount, status
		from tbl_clubboard)
		<if test="searchType == 'title' and searchWord != ''">and title like '%'||#{searchWord}||'%'</if>
		<if test="searchType == 'content' and searchWord != ''">and content like '%'||#{searchWord}||'%'</if>
		where clubseq = #{clubseq}
		order by registerdate desc
		)
		where rn between to_number(#{currentShowPageNo})*to_number(#{sizePerPage})-(to_number(#{sizePerPage})-1) and to_number(#{currentShowPageNo})*to_number(#{sizePerPage})	
	</select>
	
	
	<!-- 동호회 게시판 - 게시글 개수 -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_clubboard
		<if test="searchType == 'title' and searchWord != ''">and title like '%'||#{searchWord}||'%'</if>
		<if test="searchType == 'content' and searchWord != ''">and content like '%'||#{searchWord}||'%'</if>
		where clubseq = #{clubseq}
	</select>
	
	
	
	<!-- 동호회 게시판 - 디테일 -->
	<select id="getClubboardDetail" parameterType="HashMap" resultType="ClubBoardVO">
		select previousseq, previoustitle, clubboardseq, clubseq, title, content, fk_userid, registerdate, password, commentcount, viewcount, status, orgfilename, filename, filesize, nextseq, nexttitle
		from 
		(
		select lag(boardseq, 1) over(order by boardseq desc) previousseq,
		       lag(title, 1) over(order by boardseq desc) previoustitle,
		       boardseq, title, content, to_char(registerdate, 'yyyy-mm-dd hh24:mi:ss') registerdate, viewcount, orgfilename, filename, filesize,
		       lead(boardseq, 1) over(order by boardseq desc) nextseq,
		       lead(title, 1) over(order by boardseq desc) nexttitle
		from tbl_clubboard
		where status = 0
		<if test="searchType == 'title' and searchWord != ''">and title like '%'||#{searchWord}||'%'</if>
		<if test="searchType == 'content' and searchWord != ''">and content like '%'||#{searchWord}||'%'</if>
		) A
		where A.clubboardseq = #{clubboardseq}
	</select>
	
	
	
	<!-- 사내 캘린더에 캘린더 소분류 명 조회 -->
	<select id="existComCalendar" parameterType="String" resultType="int">
		select count(*)
		from tbl_calendar_small_category
		where fk_lgcatgono = 2 and smcatgoname = #{com_smcatgoname}  
	</select>
	
	<!-- 사내 캘린더에 캘린더 소분류 추가하기 --> 
	<insert id="addComCalendar" parameterType="HashMap">
		insert into tbl_calendar_small_category(smcatgono, fk_lgcatgono, smcatgoname, fk_userid)
		values(seq_smcatgono.nextval, 2, #{com_smcatgoname}, #{fk_userid})
	</insert>
	
	
	<!-- 동호회캘린더에서 소분류  보여주기  -->
	<select id="showCompanyCalendar" resultType="Calendar_small_category_VO">
		select smcatgono, fk_lgcatgono, smcatgoname
		from tbl_calendar_small_category
		where fk_lgcatgono = 2
		order by smcatgono asc
	</select>
	
	
	<!-- 수정된 (동호회캘린더 또는 내캘린더)속의 소분류 카테고리명이 이미 해당 사용자가 만든 소분류 카테고리명으로 존재하는지 유무 알아오기 -->
	<select id="existsCalendar" parameterType="HashMap" resultType="int">
	    select count(*)
		from tbl_calendar_small_category
		where fk_lgcatgono = #{caltype} 
		and fk_userid = #{userid} 
		and smcatgoname = #{smcatgoname}
	</select>
	
	
	<!-- (동호회캘린더 또는 내캘린더)속의 소분류 카테고리인 서브캘린더 수정하기    -->
	<update id="editCalendar" parameterType="HashMap">
		update tbl_calendar_small_category set smcatgoname = #{smcatgoname}
		where smcatgono = #{smcatgono}
	</update>
	
	
	<!-- 내 캘린더에 캘린더 소분류 명 조회 -->
	<select id="existMyCalendar" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_calendar_small_category
		where fk_lgcatgono = 1 and fk_userid = #{fk_userid} and smcatgoname = #{my_smcatgoname}  
	</select>
	
	
    <!-- 내 캘린더에 캘린더 소분류 추가하기 --> 
	<insert id="addMyCalendar" parameterType="HashMap">
		insert into tbl_calendar_small_category(smcatgono, fk_lgcatgono, smcatgoname, fk_userid)
		values(seq_smcatgono.nextval, 1, #{my_smcatgoname}, #{fk_userid})
	</insert>	
	
	
	<!-- 내 캘린더에서 내캘린더 소분류  보여주기  -->
	<select id="showMyCalendar" resultType="Calendar_small_category_VO">
		select smcatgono, fk_lgcatgono, smcatgoname
		from tbl_calendar_small_category
		where fk_lgcatgono = 1
		and fk_userid = #{fk_userid} 
		order by smcatgono asc
	</select>
	
	
	<!-- (동호회캘린더 또는 내캘린더)속의  소분류 카테고리인 서브캘린더 삭제하기   -->
	<delete id="deleteSubCalendar" parameterType="String">
		delete from tbl_calendar_small_category
		where smcatgono = #{smcatgono}
	</delete>
	
	
	<!-- 총 일정 검색 건수 -->
	<select id="getS_totalCount" parameterType="HashMap" resultType="int">
		select count(*) 
		from tbl_calendar_schedule
		where ( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
		and   ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) 
		
		<if test='fk_lgcatgono == "" and searchWord == "" and searchType == "" '>  <!-- 모든캘린더이고 검색대상이 없을 경우 -->
		    and ( fk_lgcatgono = 2 OR fk_userid = #{fk_userid} OR 
		          ( fk_userid != #{fk_userid} and lower(joinuser) like '%'||lower(#{fk_userid})||'%' ) ) <!-- 사내캘린더 와 자신이 작성한 내캘린더 와 공유받은 캘린더만 조회되도록 한다. -->
		</if>
		
		<if test='fk_lgcatgono == "2" and searchWord == "" and searchType == "" '>  <!-- 사내캘린더이고 검색대상이 없을 경우 -->
		    and ( fk_lgcatgono = 2 )                                                <!-- 사내캘린더만 조회되도록 한다. -->
		</if>
		
		<if test='fk_lgcatgono == "1" and searchWord == "" and searchType eq "" '>  <!-- 내캘린더이고 검색대상이 없을 경우 -->
		    and ( fk_lgcatgono = 1 AND fk_userid = #{fk_userid} )                                        <!-- 내캘린더만 조회되도록 한다. -->
		</if>
			
		<if test='searchWord != "" and searchType eq "joinuser" '>  <!-- 검색대상을 공유자로 검색할 경우 -->
			and fk_lgcatgono = 1                                    <!-- 내캘린더 -->
			and fk_userid = #{fk_userid}                            <!-- 로그인한 사용자가 작성한 것을 다른 사용자에게 공유 한것 -->
			and lower(joinuser) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
		</if>
		
		<if test='searchWord != "" and searchType neq "" and searchType neq "joinuser" '>  <!-- 검색대상을 공유자가 아닌 다른 것으로 검색할 경우 -->
			and lower(${searchType}) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
			<choose>
				<when test='fk_lgcatgono == "1" '>                       <!-- 내캘린더내에서만 검색할 경우  -->
					and fk_lgcatgono = 1 
					and fk_userid = #{fk_userid}                         <!-- 로그인한 사용자가 작성한 것 -->
				</when>
				
				<when test='fk_lgcatgono == "2" '>                       <!-- 사내캘린더내에서만 검색할 경우  -->
					and fk_lgcatgono = 2 
				</when>
			</choose>			
		</if>
	</select>
	
	
	<!-- 페이징 처리한 캘린더 가져오기(검색어가 없다라도 날짜범위 검색은 항시 포함된 것임) -->
	<resultMap type="HashMap" id="scheduleListSearchWithPaging_Map">
		<result property="SCHEDULENO" 	column="scheduleno" 	javaType="String" />
		<result property="STARTDATE" 	column="startdate" 		javaType="String" />
		<result property="ENDDATE" 		column="enddate" 		javaType="String" />
		<result property="SMCATGONAME" 	column="smcatgoname" 	javaType="String" />
		<result property="LGCATGONAME" 	column="lgcatgoname" 	javaType="String" />
		<result property="NAME" 		column="name" 			javaType="String" />
		<result property="SUBJECT" 		column="subject" 		javaType="String" />
		<result property="CONTENT" 		column="content" 		javaType="String" />
	</resultMap>
	<select id="scheduleListSearchWithPaging" parameterType="HashMap" resultMap="scheduleListSearchWithPaging_Map">  
		select scheduleno 
		     , startdate, enddate
		     , smcatgoname, lgcatgoname, name
		     , subject, content 
		from 
		(
			select  row_number() over(order by SD.scheduleno desc) as rno 
			      , SD.scheduleno
			      , to_char(SD.startdate, 'yyyy-mm-dd hh24:mi') as startdate
			      , to_char(SD.enddate, 'yyyy-mm-dd hh24:mi') as enddate
			      , SC.smcatgoname, LC.lgcatgoname, M.name 
			      , SD.subject, SD.content 
			from tbl_calendar_schedule SD 
			JOIN tbl_member M 
			ON SD.fk_userid = M.userid
			JOIN tbl_calendar_small_category SC 
			ON SD.fk_smcatgono = SC.smcatgono
			JOIN tbl_calendar_large_category LC 
			ON SD.fk_lgcatgono = LC.lgcatgono 
			
			where ( to_char(SD.startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
			AND   ( to_char(SD.enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) 
			
			<if test='fk_lgcatgono == "" and searchWord == "" and searchType == "" '>  <!-- 모든캘린더이고 검색대상이 없을 경우 -->
			    and ( SD.fk_lgcatgono = 2 OR SD.fk_userid = #{fk_userid} OR
			          ( SD.fk_userid != #{fk_userid} and lower(SD.joinuser) like '%'||lower(#{fk_userid})||'%' ) )  <!-- 사내캘린더 와 자신이 작성한 내캘린더 와 공유받은 캘린더만 조회되도록 한다. -->
			</if>
			
			<if test='fk_lgcatgono == "2" and searchWord == "" and searchType == "" '>  <!-- 사내캘린더이고 검색대상이 없을 경우 -->
			    and ( SD.fk_lgcatgono = 2 )                                             <!-- 사내캘린더만 조회되도록 한다. -->
			</if>
			
			<if test='fk_lgcatgono == "1" and searchWord == "" and searchType eq "" '>  <!-- 내캘린더이고 검색대상이 없을 경우 -->
			    and ( SD.fk_lgcatgono = 1 AND SD.fk_userid = #{fk_userid} )                                     <!-- 내캘린더만 조회되도록 한다. -->
			</if>
			
			<if test='searchWord != "" and searchType eq "joinuser" '>     <!-- 검색대상을 공유자로 검색할 경우 -->
				and SD.fk_lgcatgono = 1                                    <!-- 내캘린더 -->
				and SD.fk_userid = #{fk_userid}                            <!-- 로그인한 사용자가 작성한 것을 다른 사용자에게 공유 한것 -->
				and lower(SD.joinuser) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
			</if>
			
			<if test='searchWord != "" and searchType neq "" and searchType neq "joinuser" '>   <!-- 검색대상을 공유자가 아닌 다른 것으로 검색할 경우 -->
				and lower(${searchType}) like '%'||lower(#{searchWord})||'%' <!-- 검색대상 및 검색어 -->
				<choose>
					<when test='fk_lgcatgono == "1" '>                       <!-- 내캘린더내에서만 검색할 경우  -->
						and SD.fk_lgcatgono = 1 
						and SD.fk_userid = #{fk_userid}                      <!-- 로그인한 사용자가 작성한 것 -->
					</when>
					
					<when test='fk_lgcatgono == "2" '>                       <!-- 사내캘린더내에서만 검색할 경우  -->
						and SD.fk_lgcatgono = 2 
					</when>
				</choose>			
			</if>
		) V 
		where V.rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 등록된 일정에 대한 정보(달력에 표시됨)-->
	<select id="selectSchedule" resultType="com.spring.app.domain.Calendar_schedule_VO" parameterType="String">
		select scheduleno, startdate, enddate, subject, color, place, joinuser, content, fk_smcatgono, fk_lgcatgono, fk_userid 
		from tbl_calendar_schedule
		where fk_userid = #{fk_userid} OR
		fk_lgcatgono = 2 OR
		(fk_lgcatgono != 2 AND lower(joinuser) like '%'|| lower(#{fk_userid}) ||'%')
		order by scheduleno asc
	</select>
	
	
	
	<!-- 일정 상세 보기 -->
	<resultMap type="HashMap" id="detailSchedule_Map">
		<result property="SCHEDULENO" 	column="scheduleno" 	javaType="String" />
		<result property="STARTDATE" 	column="startdate" 		javaType="String" />
		<result property="ENDDATE" 		column="enddate" 		javaType="String" />
		<result property="SUBJECT" 		column="subject" 		javaType="String" />
		<result property="COLOR" 		column="color" 			javaType="String" />
		<result property="PLACE" 		column="place" 			javaType="String" />
		<result property="JOINUSER" 	column="joinuser" 		javaType="String" />
		<result property="CONTENT" 		column="content" 		javaType="String" />
		<result property="FK_SMCATGONO" column="fk_smcatgono" 	javaType="String" />
		<result property="FK_LGCATGONO" column="fk_lgcatgono" 	javaType="String" />
		<result property="FK_USERID" 	column="fk_userid" 		javaType="String" />
		<result property="NAME" 		column="name" 			javaType="String" />
		<result property="SMCATGONAME" 	column="smcatgoname" 	javaType="String" />
	</resultMap>
	<select id="detailSchedule" parameterType="String" resultMap="detailSchedule_Map">
		select SD.scheduleno
		     , to_char(SD.startdate,'yyyy-mm-dd hh24:mi') as startdate
		     , to_char(SD.enddate,'yyyy-mm-dd hh24:mi') as enddate  
		     , SD.subject
		     , SD.color
		     , nvl(SD.place,'-') as place
		     , nvl(SD.joinuser,'공유자가 없습니다.') as joinuser
		     , nvl(SD.content,'') as content
		     , SD.fk_smcatgono
		     , SD.fk_lgcatgono
		     , SD.fk_userid
		     , M.name
		     , SC.smcatgoname
		from tbl_calendar_schedule SD 
		JOIN tbl_member M
		ON SD.fk_userid = M.userid
		JOIN tbl_calendar_small_category SC
		ON SD.fk_smcatgono = SC.smcatgono
		where SD.scheduleno = #{scheduleno}
	</select>
	
	
    <!-- 일정 등록시 내캘린더,사내캘린더 선택에 따른 서브캘린더 종류를 알아오기 -->
    <select id="selectSmallCategory" parameterType="HashMap" resultType="com.spring.app.domain.Calendar_small_category_VO">
    	select smcatgono, fk_lgcatgono, smcatgoname
		from tbl_calendar_small_category
		where fk_lgcatgono = #{fk_lgcatgono} and fk_userid= #{fk_userid}
		order by smcatgono asc
    </select>
    
	
    <!-- 공유자를 찾기 위한 특정글자가 들어간 회원명단 불러오기 -->
    <select id="searchJoinUserList" parameterType="String" resultType="MemberVO">
    	select userid, name
		from tbl_member
		where lower(name) like '%'|| lower(#{joinUserName}) ||'%'
    </select>
	
	
    <!-- 일정 등록하기 -->
    <insert id="registerSchedule_end" parameterType="HashMap">
    	insert into tbl_calendar_schedule(scheduleno, startdate, enddate, subject, color, place, joinuser, content, fk_smcatgono, fk_lgcatgono, fk_userid) 
    	values(seq_scheduleno.nextval, to_date(#{startdate}, 'yyyymmddhh24miss'), to_date(#{enddate}, 'yyyymmddhh24miss'), #{subject}, #{color}, #{place}, #{joinuser}, #{content}, #{fk_smcatgono}, #{fk_lgcatgono}, #{fk_userid})  
    </insert>


	<!-- 일정삭제하기 -->
	<delete id="deleteSchedule" parameterType="String">
		delete from tbl_calendar_schedule 
		where scheduleno = #{scheduleno} 
	</delete>


	<!-- 일정수정하가 -->
	<update id="editSchedule_end" parameterType="com.spring.app.domain.Calendar_schedule_VO">
		update tbl_calendar_schedule set startdate = to_date(#{startdate}, 'yyyymmddhh24miss')
		                               , enddate = to_date(#{enddate}, 'yyyymmddhh24miss')
		                               , subject = #{subject}
		                               , fk_lgcatgono = #{fk_lgcatgono}
		                               , fk_smcatgono = #{fk_smcatgono}
		                               , color = #{color}
		                               , place = #{place}
		                               , joinuser = #{joinuser}
		                               , content = #{content}
		where scheduleno = #{scheduleno} 
	</update>
	
	
	
	
	

</mapper>